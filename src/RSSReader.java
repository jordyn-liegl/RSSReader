import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Jordyn Liegl
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //initialize the title, link, and description
        String title = "Empty Title";
        String link = "No source available";
        String description = "No description";

        //call getChildElement method to get the index of the title, link, and description
        int titleIndex = getChildElement(channel, "title");
        int linkIndex = getChildElement(channel, "link");
        int descriptionIndex = getChildElement(channel, "description");

        //check if the title, link, and description has a child to print;
        if (channel.child(titleIndex).numberOfChildren() > 0) {
            title = channel.child(titleIndex).child(0).label();
        }

        if (channel.child(linkIndex).numberOfChildren() > 0) {
            link = channel.child(linkIndex).child(0).label();
        }

        if (channel.child(descriptionIndex).numberOfChildren() > 0) {
            description = channel.child(descriptionIndex).child(0).label();
        }

        //print the header
        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("    <h1><a href=\"" + link + "\">" + title + "</a></h1>");
        out.println("    <p>" + description + "</p>");
        out.println("    <table>");
        out.println("        <tr>");
        out.println("            <th>Date</th>");
        out.println("            <th>Source</th>");
        out.println("            <th>Title</th>");
        out.println("        </tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //print the footer
        out.println("    </table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // initialize the index and counter

        int index = -1;
        int i = 0;

        while (i < xml.numberOfChildren()) {
            if (index == -1) {
                if (xml.child(i).label().equals(tag)) {
                    index = i;
                }
            }
            i++;
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //initial values of the items
        String pubDate = "No date available";
        String link = "No source available";
        String title = "No title available";
        String description = "No description available";

        //find indexes of the elements
        int pubDateIndex = getChildElement(item, "pubDate");
        int linkIndex = getChildElement(item, "link");
        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");

        //check if there is a pubDate
        if (pubDateIndex != -1) {
            if (item.child(pubDateIndex).numberOfChildren() != 0) {
                pubDate = item.child(pubDateIndex).child(0).label();
            }
        }

        //check if there is a source
        if (linkIndex != -1) {
            if (item.child(linkIndex).numberOfChildren() != 0) {
                link = item.child(linkIndex).child(0).label();
            }
        }

        //check if there is a title
        if (titleIndex != -1) {
            if (item.child(titleIndex).numberOfChildren() != 0) {
                title = item.child(titleIndex).child(0).label();
            }
        }

        //check if there is a description
        if (descriptionIndex != -1) {
            if (item.child(descriptionIndex).numberOfChildren() != 0) {
                description = item.child(descriptionIndex).child(0).label();
            }
        }

        //print the contents of the table
        out.println("        <tr>");
        out.println("            <td>" + pubDate + "</td>");
        out.println("            <td>" + link + "</td>");
        if (titleIndex != -1) {
            out.println("            <td>" + title + "</td>");
        } else {
            out.println("            <td>" + description + "</td>");
        }
        out.println("        </tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        //prompt user for RSS 2.0 URL
        out.print("Enter a URL of an RSS 2.0 feed");
        String rssURL = in.nextLine();

        //prompt user for .html output file
        out.print("Enter an output file (including .html extension): ");
        String htmlIn = in.nextLine();
        SimpleWriter htmlOut = new SimpleWriter1L(htmlIn);

        //create XMLTree, check if URL is an RSS 2.0 feed and output info into html
        XMLTree xmlRSS = new XMLTree1(rssURL);
        if (xmlRSS.label().equals("rss")) {
            if (xmlRSS.hasAttribute("version")) {
                if (xmlRSS.attributeValue("version").equals("2.0")) {
                    XMLTree channel = xmlRSS.child(0);

                    //call the outputHeader method
                    outputHeader(channel, htmlOut);

                    //call the processItem method
                    for (int j = 0; j < channel.numberOfChildren(); j++) {
                        if (channel.child(j).label().equals("item")) {
                            processItem(channel.child(j), htmlOut);
                        }
                    }

                    //call the outputFooter method
                    outputFooter(htmlOut);

                }
            }
        }

        in.close();
        out.close();
        htmlOut.close();
    }
}
